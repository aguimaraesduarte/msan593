myRexpDataFrame <- data.frame(col11 = col11,
col21 = col21,
rexpSum = rexpSum)
str(myRexpDataFrame)
hist(myRexpDataFrame$rexpSum, freq = F,
main = expression(paste("Convolution histogram for the sum of two
random exponential variables with"), lambda, "= 1"),
xlab = expression(Exp[1] + Exp[2]), ylab = "Density")
col11 <- rexp(10000000, 1)
col21 <- rexp(10000000, 1)
rexpSum <- col11 + col21
myRexpDataFrame <- data.frame(col11 = col11,
col21 = col21,
rexpSum = rexpSum)
myRexpDataFrame$rexpSum
myRexpDataFrame$col1
hist(myRexpDataFrame$rexpSum, freq = F,
main = "Convolution histogram for the sum of two
random exponential variables with lambda = 1",
xlab = expression(Exp[1] + Exp[2]), ylab = "Density")
lines(rgamma(1000, rate = 2))
lines(rgamma(1000, rate = 2, shape = 1))
?rgamma
x <- 0:20:0.1
range(5)
1:20
?:
seq(1,10,0.1)
x <- seq(1,20,0.1)
y <- dgamma(x, shape = 2)
plot(y~x)
y <- dgamma(x, shape = 3)
plot(y~x)
hist(myRexpDataFrame$rexpSum, freq = F,
main = "Convolution histogram for the sum of two
random exponential variables with lambda = 1",
xlab = expression(Exp[1] + Exp[2]), ylab = "Density")
lines(y~x)
y <- dgamma(x, shape = 2)
lines(y~x)
hist(myRexpDataFrame$rexpSum, freq = F,
main = "Convolution histogram for the sum of two
random exponential variables with lambda = 1",
xlab = expression(Exp[1] + Exp[2]), ylab = "Density")
lines(y~x)
hist(myRexpDataFrame$rexpSum, freq = F,
main = "Convolution histogram for the sum of two
random exponential variables with lambda = 1",
xlab = expression(Exp[1] + Exp[2]), ylab = "Density",
ylim = c(0, 0.4))
lines(y~x)
x
x <- seq(0,20,0.1)
y <- dgamma(x, shape = 2)
lines(y~x)
hist(myRexpDataFrame$rexpSum, freq = F,
main = "Convolution histogram for the sum of two
random exponential variables with lambda = 1",
xlab = expression(Exp[1] + Exp[2]), ylab = "Density",
ylim = c(0, 0.4))
lines(y~x, col = "red")
lines(y~x, col = "blue")
lines(y~x, col = "blue", legend(15, 0.3, "Gamma distribution (alpha=2)", col = "blue"))
lines(y~x, col = "blue", legend(10, 0.3, "Gamma distribution (alpha=2)", col = "blue"))
hist(myRexpDataFrame$rexpSum, freq = F,
main = "Convolution histogram for the sum of two
random exponential variables with lambda = 1",
xlab = expression(Exp[1] + Exp[2]), ylab = "Density",
ylim = c(0, 0.4))
lines(y~x, col = "blue", legend(10, 0.3, "Gamma distribution (alpha=2)", col = "blue", lty = 1))
lines(y~x, col = "blue", legend(6, 0.3, "Gamma distribution (alpha=2)", col = "blue", lty = 1))
hist(myRexpDataFrame$rexpSum, freq = F,
main = "Convolution histogram for the sum of two
random exponential variables with lambda = 1",
xlab = expression(Exp[1] + Exp[2]), ylab = "Density",
ylim = c(0, 0.4))
lines(y~x, col = "blue", legend(6, 0.3, "Gamma distribution (alpha=2)", col = "blue", lty = 1))
lines(y~x, col = "blue", legend(6, 0.3, "Gamma distribution (alpha=2)", col = "blue", lty = 1, cex = 0.75))
u100 <- runif(100, a, b)
u100 <- runif(100, -1, 1)
print(i in c(100,1000,10000))
for(i in c(100,1000,10000)){print(i)}
means[1]=u100
myRunifVec <- runif(10000000, 4, 6)
myRunifSample <- sample(myRunifVec, 100000)
repeat()
?repeat
()
?repeat()
?repeat
unifSampleMean_2 <- rep(0, 100000)
length(unifSampleMean_2)
for(i in 1:100000){unifSampleMean_2[i] <- mean(sample(myRunifVec, 2))}
for(i in 1:100000){unifSampleMean_2[i] <- mean(sample(myRunifVec, 2)); print(i)}
sample(myRunifVec, 2)
x <- replicate(1000, {
mm <- runif(10)
mean(mm)
})
hist(x)
mm
x <- replicate(1000, {
mm <- runif(10)
})
hist(x)
x <- replicate(100000, {
mm <- sample(myRunifVec, 2)
mean(mm)
})
unifSampleMean_2 <- replicate(1000, {
mean(sample(myRunifVec, 2))
})
hist(unifSampleMean_2)
times <- 10000000
myRunifVec <- runif(times, 4, 6)
myRunifDataFrame <- data.frame(replicate(30, sample(myRunifVec, n)))
myRunifMeans <- data.frame("Means2"= apply(myRunifDataFrame[,1:2], 1, mean),
"Means5"= apply(myRunifDataFrame[,1:5], 1, mean),
"Means10"= apply(myRunifDataFrame[,1:10], 1, mean),
"Means30"= apply(myRunifDataFrame[,1:30], 1, mean))
n <- 100000
myRunifDataFrame <- data.frame(replicate(30, sample(myRunifVec, n)))
myRunifMeans <- data.frame("Means2"= apply(myRunifDataFrame[,1:2], 1, mean),
"Means5"= apply(myRunifDataFrame[,1:5], 1, mean),
"Means10"= apply(myRunifDataFrame[,1:10], 1, mean),
"Means30"= apply(myRunifDataFrame[,1:30], 1, mean))
pchisq(56.16, 39, lower.tail = F)*2
pchisq(56.16, 39, lower.tail = F)
qchisq(0.975, 39)
qchisq(0.025, 39)
qnorm(0.975)
qnorm(0.025)
qnorm(0.9, lower.tail = F)
qnorm(0.9)
pnorm(1.46, lower.tail = F)
?pnorm
pnorm(0.05)
qnorm(0.05)
0.072-qnorm(0.95)*sqrt((0.072*(1-0.072))/1000)
0.072+qnorm(0.95)*sqrt((0.072*(1-0.072))/1000)
.5*log(1.65/.35)
pnorm(0.975, lower.tail = F)
qnorm(0.975, lower.tail = F)
.5*log(1.6/.4)
F_6 = .5*log(1.6/.4)
F_66 = .5*log(1.65/.35)
qnorm(0.975, F_6, sqrt(1/275-3), lower.tail = F)
qnorm(0.975, F_6, sqrt(1/(275-3)), lower.tail = F)
pnorm(F_66, F_6, sqrt(1/272), lower.tail = F)
pnorm(F_66, F_6, sqrt(1/272), lower.tail = F)*2
f=0.0405
n=0.0376
nf=60
nn=90
sf=f
sn=n
(sf^2)/(sn^2)
pf(1.160, 59, 89, lower.tail = F)
pf(1.160, 59, 89, lower.tail = F)*2
qf(0.975, 59, 89)
table(iris$Species)
with(iris, Species)
with(iris, unique(Species))
table(unique(iris$Species))
with(mtcars, which(cyl == 6 & hp -- 110))
with(mtcars, which(cyl == 6 && hp -- 110))
with(mtcars, which(cyl == 6 & hp == 110))
subset(mtcars, mpg > 32, select = c("hp", "disp"))
seq(1, 10, length.out = 100)
seq_len(10)
myVec <- c(LETTERS[4:8])
seq_along(myVec)
rep(letters[2:4], times = 2, each = 2)
myAtomicVector <- c(1 ,2, 99.99, NA, sqrt(2))
any(is.na(myAtomicVector))
names(irirs)
with(iris)
names(iris)
with(iris,
table(Sepal.Length))
table(iris)
with(iris,
table(Sepal.length))
table(iris$Sepal.Length)
pretty(iris$Sepal.Length, 8)
sum(unique(iris$Species))
length(unique(iris$Species))
subset(iris, iris$Sepal.Width > 2.3)
subset(iris, iris$Pepal.Width > 2.3)
subset(iris, iris$Petal.Width > 2.3)
oddNumbers <- seq(11, 87, 2)
oddNumbers
sample(oddNumbers, 3, replace = F)
with(iris)
table(Sepal.Length),
table(iris$Sepal.Length)
pretty(iris$Sepal.Length, 8)
length(unique(iris$Species))
subset(iris, iris$Petal.Width > 2.3)
oddNumbers <- seq(11, 87, 2)
sample(oddNumbers, 3, replace = F)
summary(iris$Sepal.Length)
table(iris$Sepal.Length)
pretty(iris$Sepal.Length, 8)
cut(iris$Sepal.Length, 8)
c <- cut(iris$Sepal.Length, 8)
levels(c)
levels(order(c))
levels(c)
length(unique(iris$Species))
subset(iris, iris$Petal.Width > 2.3)
myFunc <- function(x) x^2
myFunc(2)
rowsAColsB <- function(a, b){
subset(mtcars[a:b,])
}
rowsAColsB(1, 3)
mtcars[1:5]
mtcars[1:5,]
rowsAColsB(1, 3)
v <- rowsAColsB(1, 3)
v
v <- c(1, 2, 3, 4, 5)
as.data.frame(v)
v^2
fun2 <- function(vec){
sq <- vec^2
return(data.frame(append(vec, sq)))
}
v <- c(1, 2, 3, 4, 5)
fun2(v)
fun1 <- function(a, b){
return(subset(mtcars[a:b,]))
}
fun1B(1, 3)
fun1(1, 3)
fun2 <- function(vec){
sq <- vec^2
return(data.frame(v = append(vec, sq)))
}
v <- c(1, 2, 3, 4, 5)
fun2(v)
fun2 <- function(vec){
sq <- vec^2
head(data.frame(v = append(vec, sq)), 10)
}
v <- c(1, 2, 3, 4, 5)
fun2(v)
v <- c(1, 2, 3, 4, 5, 6)
fun2(v)
fun2 <- function(vec){
sq <- vec^2
return(head(data.frame(v = append(vec, sq)), 10))
}
v <- c(1, 2, 3, 4, 5, 6)
fun2(v)
fun2 <- function(vec){
sq <- vec^2
df <- data.frame(v = append(vec, sq))
return(head(df, 10))
}
v <- c(1, 2, 3, 4, 5, 6)
fun2(v)
fun3 <- function(vec){
sq <- vec^2
df <- data.frame(v = append(vec, sq))
return(vec <- df)
}
fun3(v)
v
fun2 <- function(vec){
sq <- vec^2
df <- data.frame(vec, sq)
return(head(df, 10))
}
v <- c(1, 2, 3, 4, 5, 6)
fun2(v)
fun3 <- function(vec){
sq <- vec^2
df <- data.frame(vec, df)
vec <<- df
}
fun3(v)
fun3 <- function(vec){
sq <- vec^2
df <- data.frame(vec, df)
assign("vec", df, envir = .GlobalEnv)
}
fun3(v)
fun3 <- function(vec){
sq <- vec^2
df <- data.frame(vec, df)
vec <<- df
}
fun3(v)
fun3 <- function(vec){
sq <- vec^2
df <- data.frame(vec, df)
assign(vec, df)
}
fun3(v)
fun3 <- function(vec){
sq <- vec^2
df <- data.frame(vec, df)
assign("vec", df)
}
fun3(v)
fun3 <- function(vec){
sq <- vec^2
df <- data.frame(vec, df)
assign("vec", df, .GlobalEnv)
}
fun3(v)
fun3 <- function(vec) {
sq <- vec^2
df <- data.frame(vec, df)
assign(deparse(substitute(vec)), df, env=.GlobalEnv)
}
fun3(v)
fun3 <- function(vec) {
sq <- vec^2
df <- data.frame(vec, df)
assign(deparse(vec), df, env=.GlobalEnv)
}
fun3(v)
deparse(v)
substitute(vec)
deparse(substitute(vec))
fun3 <- function(vec) {
sq <- vec^2
df <- data.frame(vec, df)
print(deparse(substitute(vec)))
assign(deparse(substitute(vec)), df, env=.GlobalEnv)
}
fun3(v)
fun3 <- function(vec) {
sq <- vec^2
df <- data.frame(vec, df)
print(deparse(substitute(vec)))
#assign(deparse(substitute(vec)), df, env=.GlobalEnv)
}
fun3(v)
fun3 <- function(vec) {
tmp <- deparse(substitute(vec))
sq <- vec^2
df <- data.frame(vec, df)
print(deparse(substitute(vec)))
assign(tmp, df, env=.GlobalEnv)
}
fun3(v)
fun3 <- function(vec) {
tmp <- deparse(substitute(vec))
sq <- vec^2
df <- data.frame(vec, df)
print(deparse(substitute(vec)))
assign(tmp, df, .GlobalEnv)
}
fun3(v)
fun3 <- function(vec) {
eval(parse(text = paste(substitute(vec), "<<- data.frame(vec, vec^2")))
}
fun3(v)
fun3 <- function(vec) {
eval(parse(text = paste(substitute(vec), "<<- data.frame(vec, vec^2)")))
}
fun3(v)
v
fun3 <- function(vec) {
sq <- vec^2
df <- data.frame(vec, sq)
assign(as.character(substitute(vec)), df, env = .GlobalEnv)
#eval(parse(text = paste(substitute(vec), "<<- data.frame(vec, vec^2)")))
}
fun3(v)
v <- c(1, 2, 3, 4, 5, 6)
fun3 <- function(vec) {
sq <- vec^2
df <- data.frame(vec, sq)
assign(as.character(substitute(vec)), df, env = .GlobalEnv)
#eval(parse(text = paste(substitute(vec), "<<- data.frame(vec, vec^2)")))
}
fun3(v)
v
v <- c(1, 2, 3, 4, 5, 6)
fun3 <- function(vec) {
sq <- vec^2
df <- data.frame(vec, sq)
#vec <<- df #only works if the global variable is named "vec"
assign(as.character(substitute(vec)), df, env = .GlobalEnv)
fun3 <- function(vec) {
sq <- vec^2
df <- data.frame(vec, sq)
#vec <<- df #only works if the global variable is named "vec"
#assign(as.character(substitute(vec)), df, env = .GlobalEnv)
#eval(parse(text = paste(substitute(vec), "<<- data.frame(vec, vec^2)")))
}
v <- fun3(v)
v
F <- 1
F
rm(F)
myFunc_06 <- function() {
if(!exists("myAtomicVector")){
myAtomicVector <- 999
} else {
myAtomicVector <- myAtomicVector + 1
}
print(myAtomicVector)
}
myAtomicVector <- 1
exists(myAtomicVector)
exists("myAtomicVector")
myFunc_06()
myAtomicVector <- 1
myFunc_06 <- function() {
if(!exists("myAtomicVector")){
myAtomicVector <- 999
} else {
myAtomicVector <- myAtomicVector + 1
}
print(myAtomicVector)
}
myFunc_06()
rm(myAtomicVector)
myFunc_06()
myFunc <- function(x, y, z){
codetools::findLocalsList(myFunc)
}
myFunc(1,2,3)
myFunc <- function(x, y, z){
codetools::findLocals(myFunc)
}
myFunc(1,2,3)
myFunc <- function(x, y, z){
x+y+z
}
codetools::findFuncLocals(myFunc)
codetools::findLocals(myFunc)
codetools::findLocalsList(myFunc)
setwd("~/Documents/msan593/HW2")
myData <- read.csv("hw2.csv", header = T, stringsAsFactors = F, na.strings = c("NA", ""))
myData$Created.Date <- as.Date( as.character(myData$Created.Date), "%m/%d/%y")
myData <- subset(myData, myData$Created.Date >= "2015-09-01")
colnames(myData) <- c("PName",
"CDate",
"PStatus",
"PurchasedThru",
"AgrType",
"InstBranch",
"UtilityCompany",
"Jurisdiction",
"SysSize",
"UsingPartner",
"PanelUpgrade",
"ReroofArray",
"HOA",
"PEStampReq")
myData$PStatus <- factor(myData$PStatus, levels = unique(myData$PStatus))
myData$PStatus[grepl("^PR-.*", myData$PStatus)]
myData <- read.csv("hw2.csv", header = T, stringsAsFactors = F, na.strings = c("NA", ""))
myData$Created.Date <- as.Date( as.character(myData$Created.Date), "%m/%d/%y")
myData <- subset(myData, myData$Created.Date >= "2015-09-01")
colnames(myData) <- c("PName",
"CDate",
"PStatus",
"PurchasedThru",
"AgrType",
"InstBranch",
"UtilityCompany",
"Jurisdiction",
"SysSize",
"UsingPartner",
"PanelUpgrade",
"ReroofArray",
"HOA",
"PEStampReq")
myData$PStatus[grepl("^PR-.*", myData$PStatus)]
myData$PStatus[grepl("^PR.*", myData$PStatus)]
grepl("^PR.*", myData$PStatus)
grepl("PR.*", myData$PStatus)
sum(grepl("PR.*", myData$PStatus))
sum(grepl("PR", myData$PStatus))
sum(grepl("PR", myData$PName))
sum(grepl("^PR-.*", myData$PName))
myData$PName[grepl("^PR-.*", myData$PName)]
myData$PName[!grepl("^PR-.*", myData$PName)]
myData$PStatus <- factor(myData$PStatus, levels = unique(myData$PStatus))
myData$PurchasedThru[myData$PurchasedThru == "Costco (Dept 44)"] <- "Costco"
myData$PurchasedThru[myData$PurchasedThru == "Standard (Non-Retail)"] <- "Non-Retail"
myData$PurchasedThru <- factor(myData$PurchasedThru, levels = unique(myData$PurchasedThru))
myData$AgrType <- factor(myData$AgrType, levels = unique(myData$AgrType))
myData$UtilityCompany <- factor(myData$UtilityCompany, levels = unique(myData$UtilityCompany))
indices_Jurisdiction_toUpper <- which(myData$Jurisdiction == "NY-City of Longbeach")
myData$Jurisdiction[indices_Jurisdiction_toUpper] <- toupper("NY-City of Longbeach")
myData$UsingPartner <- as.logical(myData$UsingPartner)
myData$PanelUpgrade <- as.logical(myData$PanelUpgrade)
myData$ReroofArray <- as.logical(myData$ReroofArray)
myData$HOA[myData$HOA == "No"] <- "0"
myData$HOA[myData$HOA == "Yes"] <- "1"
myData$HOA[myData$HOA == "Customer did not know"] <- NA
myData$HOA <- as.logical(myData$HOA == "1")
myData$PEStampReq <- as.logical(myData$PEStampReq)
myData <- myData[!is.na(myData$PStatus),]
myData$PName[!grepl("^PR-.*", myData$PName)]
myData$PName[!grep("^PR-.*", myData$PName)]
myData$PName[!grepl("^PR-.*", myData$PName)]
which(myData$PName == myData$PName[!grepl("^PR-.*", myData$PName)])
which(myData$PName == myData$PName[!grepl("^PR-.*", myData$PName)][0])
which(myData$PName == myData$PName[!grepl("^PR-.*", myData$PName)][1])
which(myData$PName == myData$PName[!grepl("^PR-.*", myData$PName)][2])
myData <- myData[-c(25968, 31974),]
state.abb

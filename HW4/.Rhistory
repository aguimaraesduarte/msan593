hist(simulation$Y[simulation$accept], freq=F, breaks=75, ylim=c(0, 0.55), xlim=c(0, 8),
main="Histogram of realizations generated
for the Gamma random variable", xlab="x")
curve(dgamma(x, alpha, beta), 0, 8, add=T, col="red")
legend(3, 0.5, paste("Gamma(", alpha, ",", beta, ")"), lty=1, col="red")
writeLines(paste(sum(simulation$accept), "realizations of the Gamma distribution
out of", n, "realizations of the exponential distribution."))
alpha <- 2
beta <- 1.5
lambda <- (alpha+beta)/alpha#1/beta
n <- 15000
simulation <- data.frame(unif = runif(n, 0, 1)) # U~unif(0, 1)
simulation$Y <- rexp(n, lambda) # Y~Exp(1/beta)
simulation$auxilliary <- dexp(simulation$Y, lambda) # g(Y)
simulation$target <- dgamma(simulation$Y, alpha, beta) # f(Y)
c <- 1.3601
simulation$accept <- ifelse(simulation$unif < simulation$target/(c*simulation$auxilliary),
T, F) # accept if U<f/(c*g)
hist(simulation$Y[simulation$accept], freq=F, breaks=75, ylim=c(0, 0.55), xlim=c(0, 8),
main="Histogram of realizations generated
for the Gamma random variable", xlab="x")
curve(dgamma(x, alpha, beta), 0, 8, add=T, col="red")
legend(3, 0.5, paste("Gamma(", alpha, ",", beta, ")"), lty=1, col="red")
lambda <- (alpha+beta)/beta#1/beta
n <- 15000
simulation <- data.frame(unif = runif(n, 0, 1)) # U~unif(0, 1)
simulation$Y <- rexp(n, lambda) # Y~Exp(1/beta)
simulation$auxilliary <- dexp(simulation$Y, lambda) # g(Y)
simulation$target <- dgamma(simulation$Y, alpha, beta) # f(Y)
c <- 1.3601
simulation$accept <- ifelse(simulation$unif < simulation$target/(c*simulation$auxilliary),
T, F) # accept if U<f/(c*g)
hist(simulation$Y[simulation$accept], freq=F, breaks=75, ylim=c(0, 0.55), xlim=c(0, 8),
main="Histogram of realizations generated
for the Gamma random variable", xlab="x")
curve(dgamma(x, alpha, beta), 0, 8, add=T, col="red")
legend(3, 0.5, paste("Gamma(", alpha, ",", beta, ")"), lty=1, col="red")
lambda <- alpha/(alpha+beta)#1/beta
n <- 15000
simulation <- data.frame(unif = runif(n, 0, 1)) # U~unif(0, 1)
simulation$Y <- rexp(n, lambda) # Y~Exp(1/beta)
simulation$auxilliary <- dexp(simulation$Y, lambda) # g(Y)
simulation$target <- dgamma(simulation$Y, alpha, beta) # f(Y)
c <- 1.3601
simulation$accept <- ifelse(simulation$unif < simulation$target/(c*simulation$auxilliary),
T, F) # accept if U<f/(c*g)
hist(simulation$Y[simulation$accept], freq=F, breaks=75, ylim=c(0, 0.55), xlim=c(0, 8),
main="Histogram of realizations generated
for the Gamma random variable", xlab="x")
curve(dgamma(x, alpha, beta), 0, 8, add=T, col="red")
legend(3, 0.5, paste("Gamma(", alpha, ",", beta, ")"), lty=1, col="red")
lambda <- beta/(alpha+beta)#1/beta
n <- 15000
simulation <- data.frame(unif = runif(n, 0, 1)) # U~unif(0, 1)
simulation$Y <- rexp(n, lambda) # Y~Exp(1/beta)
simulation$auxilliary <- dexp(simulation$Y, lambda) # g(Y)
simulation$target <- dgamma(simulation$Y, alpha, beta) # f(Y)
c <- 1.3601
simulation$accept <- ifelse(simulation$unif < simulation$target/(c*simulation$auxilliary),
T, F) # accept if U<f/(c*g)
hist(simulation$Y[simulation$accept], freq=F, breaks=75, ylim=c(0, 0.55), xlim=c(0, 8),
main="Histogram of realizations generated
for the Gamma random variable", xlab="x")
curve(dgamma(x, alpha, beta), 0, 8, add=T, col="red")
legend(3, 0.5, paste("Gamma(", alpha, ",", beta, ")"), lty=1, col="red")
lambda <- alpha/(alpha+beta)#1/beta
n <- 15000
simulation <- data.frame(unif = runif(n, 0, 1)) # U~unif(0, 1)
simulation$Y <- rexp(n, lambda) # Y~Exp(1/beta)
simulation$auxilliary <- dexp(simulation$Y, lambda) # g(Y)
simulation$target <- dgamma(simulation$Y, alpha, beta) # f(Y)
c <- 1.3601
simulation$accept <- ifelse(simulation$unif < simulation$target/(c*simulation$auxilliary),
T, F) # accept if U<f/(c*g)
hist(simulation$Y[simulation$accept], freq=F, breaks=75, ylim=c(0, 0.55), xlim=c(0, 8),
main="Histogram of realizations generated
for the Gamma random variable", xlab="x")
curve(dgamma(x, alpha, beta), 0, 8, add=T, col="red")
legend(3, 0.5, paste("Gamma(", alpha, ",", beta, ")"), lty=1, col="red")
writeLines(paste(sum(simulation$accept), "realizations of the Gamma distribution
lambda <- 1/beta#alpha/(alpha+beta)#1/beta
n <- 15000
simulation <- data.frame(unif = runif(n, 0, 1)) # U~unif(0, 1)
simulation$Y <- rexp(n, lambda) # Y~Exp(1/beta)
simulation$auxilliary <- dexp(simulation$Y, lambda) # g(Y)
simulation$target <- dgamma(simulation$Y, alpha, beta) # f(Y)
c <- 1.3601
simulation$accept <- ifelse(simulation$unif < simulation$target/(c*simulation$auxilliary),
T, F) # accept if U<f/(c*g)
hist(simulation$Y[simulation$accept], freq=F, breaks=75, ylim=c(0, 0.55), xlim=c(0, 8),
main="Histogram of realizations generated
for the Gamma random variable", xlab="x")
curve(dgamma(x, alpha, beta), 0, 8, add=T, col="red")
legend(3, 0.5, paste("Gamma(", alpha, ",", beta, ")"), lty=1, col="red")
writeLines(paste(sum(simulation$accept), "realizations of the Gamma distribution
out of", n, "realizations of the exponential distribution."))
1/beta
.5*log((1+0.65)/(1-0.6))
.5*log10((1+0.65)/(1-0.6))
.5*log((1+0.65)/(1-0.65))
myFunc_13 <- function(arg1, arg2) {
any(c(missing(arg1), missing(arg2)))
}
myFunc_13()
myFunc_13(1)
myFunc_13(1,2)
ls()
myFunc_17 <- function(a = ls()){
z <- 10
a
}
myFunc_17()
myFunc_17(4)
myFunc_17(ls())
getwd()
myFunc_17(getwd())
f <- function(){
for(i in 1:10){
if(x == 5){return()}
}
f <- function(x){
for(i in 1:10){
if(x == 5){return()}
}
f <- function(x){
for(i in 1:10){
if(x == 5){return()}
}
print(7)
}
f(1)
f(5)
f <- function(x){
for(i in 1:10){
if(x == 5){return(x)}
}
print(7)
}
f(5)
f(1)
myFunc <- function(firstRow, lastRow){
iris[firstRow:lastRow]
}
myFunc(1,3)
myFunc <- function(firstRow, lastRow){
iris[firstRow:lastRow,]
}
myFunc(1,3)
myFunc(firstRow = 1, lastRow = 3)
myFunc3 <- function(firstRow = 1, lastRow = 10, myDataFrame = iris){
force(firstRow)
force(lastRow)
force(myDataFrame)
myDataFrame[firstRow:lastRow,]
}
myFunc3()
myFunc3(jane)
myFunc3(3)
myFunc1(jane)
myFunc(jane)
myFunc <- function(firstRow=1, lastRow=3){
iris[firstRow:lastRow,]
}
myFunc(jane)
myFunc <- function(firstRow, lastRow){
iris[firstRow:lastRow,]
}
myFunc(firstRow = 1, lastRow = 3)
#formal: firstRow, lastRow
#calling: 1, 3
myFunc2 <- function(firstRow, lastRow, myDataFrame){
myDataFrame[firstRow:lastRow,]
}
myFunc2(1, 3, irs)
myFunc2(1, 3, iris)
myFunc3 <- function(firstRow = 1, lastRow = 10, myDataFrame = iris){
force(firstRow)
force(lastRow)
force(myDataFrame)
myDataFrame[firstRow:lastRow,]
}
myFunc3()
?codetools::findFuncLocals()
?codetools::findFuncLocals
codetools::findGlobals(myFunc)
myFunc2(1, 3, mtcars)
myFunc3 <- function(firstRow = 1, lastRow = 10, myDataFrame = iris){
force(c(firstRow, lastRow, myDataFrame))
myDataFrame[firstRow:lastRow,]
}
myFunc3()
myFunc3(jane)
"a +"b
1:1
length(c(1,2,3,4))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(log(vec[i])),
error = function(x){
print(x$message)
print(x$call)
writeLines("\nError\n")
})
}
logVector(1)
logVector(2)
logVector(c(1, 2))
logVector(c(1, -2))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(log(vec[i])),
error = function(x){
print(x$message)
print(x$call)
writeLines("\nError\n")
},
warning = function(x){
print(x$message)
print(x$call)
writeLines("\nWarning\nCannot compute log of", vec[i], "\n")
})
}
logVector(c(1, -2))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(log(vec[i])),
error = function(x){
print(x$message)
print(x$call)
writeLines("\nError\n")
},
warning = function(x){
print(x$message)
print(x$call)
writeLines(paste("\nWarning\nCannot compute log of", vec[i], "\n"))
})
}
logVector(c(1, -2))
logVector(c(1, "a"))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(log(vec[i])),
error = function(x){
print(x$message)
print(x$call)
writeLines(paste("\nError\nCannot compute the log of", vec[i], "\n"))
},
warning = function(x){
print(x$message)
print(x$call)
writeLines(paste("\nWarning\nCannot compute log of", vec[i], "\n"))
})
}
logVector(c(1, "a"))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(log(vec[i])),
error = function(x){
print(x$message)
print(x$call)
writeLines(paste("\nError\nCannot compute the log of string", vec[i], "\n"))
},
warning = function(x){
print(x$message)
print(x$call)
writeLines(paste("\nWarning\nCannot compute log of", vec[i], "\n"))
})
}
logVector(c(1, "a"))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(log(vec[i])),
error = function(x){
writeLines(paste("\nError\nCannot compute the log of string", vec[i], "\n"))
},
warning = function(x){
writeLines(paste("\nWarning\nCannot compute log of", vec[i], "\n"))
})
}
logVector(c(1, "a"))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(log(vec[i])),
error = function(x){
writeLines(paste("\nError\nCannot compute the log of string '", vec[i], "'\n", sep = ""))
},
warning = function(x){
writeLines(paste("\nWarning\nCannot compute log of", vec[i], "\n"))
})
}
logVector(c(1, "a"))
logVector(c(1, -1))
logVector(-1
)
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(log(vec[i])),
error = function(x){
writeLines(paste("\nError\nCannot compute the log of string '", vec[i], "'\n", sep = ""))
},
warning = function(x){
writeLines(paste("\nWarning\nCannot compute log of negative number", vec[i], "\n"))
})
}
logVector(-1)
logVector(c(1,2,3))
logVector(c(1,-2,3))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print("log of", vec[i], "is", log(vec[i])),
error = function(x){
writeLines(paste("\nError\nCannot compute the log of string '", vec[i], "'\n", sep = ""))
},
warning = function(x){
writeLines(paste("\nWarning\nCannot compute log of negative number", vec[i], "\n"))
})
}
logVector(c(1,-2,3))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(paste("log of", vec[i], "is", log(vec[i]))),
error = function(x){
writeLines(paste("\nError\nCannot compute the log of string '", vec[i], "'\n", sep = ""))
},
warning = function(x){
writeLines(paste("\nWarning\nCannot compute log of negative number", vec[i], "\n"))
})
}
logVector(c(1,-2,3))
logVector(c(1,-2,"a"))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(paste("log of", vec[i], "is", log(vec[i]))),
error = function(x){
writeLines(paste("Error\nCannot compute the log of string '", vec[i], "'\n", sep = ""))
},
warning = function(x){
writeLines(paste("Warning\nCannot compute log of negative number", vec[i], "\n"))
})
}
logVector(c(1,-2,"a"))
logVector(c(1,2,3))
logVector(c(1,-2,3))
logVector <- function(vec){
for(i in 1:length(vec)){
tryCatch(print(paste("log of", vec[i], "is", log(vec[i]))),
error = function(x){
writeLines(paste("Error\nCannot compute the log of string '", vec[i], "'", sep = ""))
},
warning = function(x){
writeLines(paste("Warning\nCannot compute log of negative number", vec[i]))
})
}
logVector(c(1,2,3))
logVector(c(1,-2,3))
logVector(c(1,-2,"a"))
logVector(0)
r0.618
r <- 0.618
re <- sqrt(1-r^2)
x <- rnorm(1000)
y <- x*r + rnorm(1000)*re
y[x<0] <- -y[x<0]
par(mar=rep(0,4))
plot(x, y, col=rgb(1,0,1), axes=F, asp=1)
x <- rnorm(100000)
y <- x*r + rnorm(1000)*re
y[x<0] <- -y[x<0]
plot(x, y, col=rgb(1,0,1), axes=F, asp=1)
x <- rnorm(10000)
y <- x*r + rnorm(1000)*re
y[x<0] <- -y[x<0]
plot(x, y, col=rgb(1,0,1), axes=F, asp=1)
myDataFrame <- data.frame(x = 1:3, y = -4:-6, z = LETTERS[1:3])
myDataFrame[[1]]
myDataFrame
myDataFrame[[1,]]
myDataFrame[1,]
order(c(NA,4,2,7,2,9))
order(c(NA,4,2,7,2,9), na.last = F)
order(c(NA,4,2,7,2,9), decreasing = T)
order(c(NA,4,2,7,2,9), decreasing = F)
?length
a=c()
length(a) <- 5
a
(5/13)*.5 + (7/10)*.5
(5/26) / ((5/13)*.5 + (7/10)*.5)
5/26+7/20
(5/26)/(5/26+7/20)
setwd("~/Documents/msan593/HW4")
tweets = read.csv("tweets.csv", header = F, stringsAsFactors = F)
(q1 <- tweets[grepl("\\<flight\\>", tweets[,]),])
cat("\014")
rm(list=ls())
cat("\014")
install.packages("ggplot2")
library(ggplot2)
qplot(as.factor(mtcars$cyl))
ggplot(diamonds, aes(carat, price, colour = cut))
myPlot <- ggplot(diamonds, aes(carat, price, colour = cut))
(myPlot <- myPlot + geom_point())
myBestFitLine <- geom_smooth(method = "lm", se = F,
colour = alpha("steelblue", 0.5), size = 2)
qplot(sleep_rem, sleep_total, data = msleep) + myBestFitLine
qplot(awake, brainwt, data = msleep) + myBestFitLine
qplot(bodywt, brainwt, data = msleep, log= "xy") + myBestFitLine
qplot(sleep_rem, sleep_total, data = msleep) + myBestFitLine
myBestFitLine <- geom_smooth(method = "lm", se = T,
colour = alpha("steelblue", 0.5), size = 2)
qplot(sleep_rem, sleep_total, data = msleep) + myBestFitLine
qplot(awake, brainwt, data = msleep) + myBestFitLine
qplot(bodywt, brainwt, data = msleep, log= "xy") + myBestFitLine
summary(myPlot)
(myPlot <- ggplot(mtcars, aes(x = mpg, y = wt)) + geom_point())
myPlot + geom_point(aes(colour = factor(cyl)))
myPlot + geom_point(aes(y = disp))
myPlot <- ggplot(mtcars, aes(x = mpg, y = wt))
myPlot <- + geom_point()
myPlot <- ggplot(mtcars, aes(x = mpg, y = wt))
myPlot + geom_point()
myPlot + geom_point(aes(colour = factor(cyl)))
myPlot + geom_point(aes(y = disp))
myPlot <- ggplot(Oxboys, aes(age, height, group = Subject)) + geom_line()
my_ggplotObj_01 <- ggplot(diamonds, aes(carat))
summary(my_ggplotObj_01)
my_ggplotObj_01 + geom_histogram()
my_ggplotObj_01 + geom_histogram(y = ..density..)
my_ggplotObj_01 + geom_histogram(y = density)
..
my_ggplotObj_01 + geom_histogram(y = ..density..)
my_ggplotObj_01 + geom_histogram(aes(y = ..density..))
(q1 <- tweets[grepl("\\<flight\\>", tweets[,]),])
tweets = read.csv("tweets.csv", header = F, stringsAsFactors = F)
rm(list=ls())
cat("\014")
tweets = read.csv("tweets.csv", header = F, stringsAsFactors = F)
(q1 <- tweets[grepl("\\<flight\\>", tweets[,]),])
(q2 <- sum(grepl("\\?$", tweets[,])))
(q3 <- sum(grepl("[A-Z]{3}", tweets[,]))) # problem with #7 EZP in url
grepl("[A-Z]{3}", tweets[,])
grep("[A-Z]{3}", tweets[,])
grep("[A-Z]{3}", tweets[,], value = T)
grep("\\?$", tweets[,], value = T)
(q4 <- tweets[grepl("http[s]?:\\/\\/", tweets[,]),])
(q5 <- tweets[,] <- gsub("[\\!]{2,}", "\\!", tweets[,]))
q6 <- tweets[,] <- gsub("[\\!\\?\\.]{2,}", "\\.", tweets[,])
(split_tweets <- strsplit(q6, "\\.")) # problem with urls
pattern <- "\\#[a-zA-z0-9]*"
m <- gregexpr(pattern, tweets[,])
m
(hashtags <- regmatches(tweets[,], m))
rm(list=ls())
cat("\014")
sotu <- readLines("stateoftheunion1790-2012.txt", encoding = "UTF-8")
presidents <- c()
dates <- c()
num_lines <- c()
num_sentences <- c()
num_words <- c()
# indices of ***
counter = 1
indices_separators <- which(grepl("\\*\\*\\*", sotu))
for(i in indices_separators){
if(i == indices_separators[length(indices_separators)]){
break
}
presidents <- append(presidents, sotu[i+3])
dates <- append(dates, sotu[i+4])
begin <- i+6
end <- indices_separators[counter+1]-2
speech <- sotu[begin:end]
num_lines <- append(num_lines, length(speech != ""))
num_sentences <- append(num_sentences, sum(sapply(gregexpr("\\.", speech), function(x) sum(x > 0))))
num_words <- append(num_words, sum(sapply(gregexpr("[[:alnum:]]+", speech), function(x) sum(x > 0))))
counter <- counter + 1
}
years <- as.numeric(lapply(dates, function(x) as.numeric(format(as.Date(x, "%B %d, %Y"),'%Y'))))
months <- as.character(lapply(dates, function(x) format(as.Date(x, "%B %d, %Y"),'%B')))
days_of_month <- as.numeric(lapply(dates, function(x) as.numeric(format(as.Date(x, "%B %d, %Y"),'%d'))))
days_of_week <- as.character(lapply(dates, function(x) weekdays(as.Date(x, "%B %d, %Y"))))
DF_sotu <- data.frame("President" = factor(presidents, levels = unique(presidents)),
"Year"= years,
"Month"= factor(months, levels = c("January",
"February",
"March",
"April",
"May",
"June",
"July",
"August",
"September",
"October",
"November",
"December"), ordered = T),
"DayOfMonth" = days_of_month,
"DayOfWeek" = factor(days_of_week, levels = c("Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday"), ordered = T),
"NumLines" = num_lines,
"NumSentences" = num_sentences,
"NumWords" = num_words,
stringsAsFactors = F)
str(DF_sotu)
gregexpr("\\.", sotu[244:263])
sapply(gregexpr("\\.", sotu[244:363]), function(x) sum(x > 0))
dates
is.atomic(dates)
